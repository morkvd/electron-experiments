// IpcRenderer facilitates communication between main.js(main node process)
// and mainWindow.js (the window process).
const { ipcRenderer: ipc } = require('electron'); // eslint-disable-line import/no-unresolved

// React and ReactDOM libraries
const React = require('react');
const ReactDOM = require('react-dom');

// static screens

/* eslint-disable max-len, comma-spacing */
const screens = {
  startup: [
    'O','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','O',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','J','o','h','n',' ','H','o','r','t','o','n',' ','C','o','n','w','a','y','\'','s','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','G','A','M','E','·','O','F','·','L','I','F','E','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','P','R','E','S','S','·','·','S','P','A','C','E','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','T','O','·','S','T','A','R','T','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    '#','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','·','#',
    'O','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','O',
  ],
};
/* eslint-enable max-len, comma-spacing */

'john horton conway\'s game of life '

// Reference to the document
const doc = document;

// Select menu bar button and add an event listener.
// on click send a the requested action to the main process
const exitBtn = doc.querySelector('.menu-bar--btn__exit');
exitBtn.addEventListener('click', () => ipc.send('exit-request') );

const minimizeBtn = doc.querySelector('.menu-bar--btn__minimize');
minimizeBtn.addEventListener('click', () => ipc.send('minimize-request'));

let level = [];

// PlayArea component is the part of the window that displays the game.
class PlayArea extends React.Component {
  render() {
    let tiles = [];
    for (let i = 0; i < this.props.lvl.length; i++) {
      tiles.push(<Tile {...this.props} key={i} i={i} />);
    }
    return (
      <section className="play-area">
        {tiles}
      </section>
    );
  }
}

class Tile extends React.Component {
  render() {
    const i = this.props.i;

    let content = this.props.lvl[i];
    let tileCssClass = 'tile';

    return (
      <div className={tileCssClass}>{content}</div>
    );
  }
}

ReactDOM.render(
  <PlayArea lvl={screens.startup} />,
  doc.getElementById('container')
);

ipc.on('level-updated', (event, message) => {
  level = message;
  ReactDOM.render(
    <PlayArea lvl={level} />,
    doc.getElementById('container')
  );
});
